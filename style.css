// 1. Configuración usuarios y campos
const usuarios = {
  admin: "1234",
  kevin: "admin2025"
};

const campos = [
  "CODIGO", "NOMBRE", "RUTA", "CEDULA", "TELEFONO", "DISCAPACIDAD", "TIPO HORARIO",
  "CARGO", "AREA", "MODALIDAD DE CONTRATO", "DIRECCION", "HORARIO", "LUGAR TRABAJO",
  "LONGITUD", "LATITUD", "CONTRATO LUZ", "TRANSPORTE"
];

// Variables globales
let geojsonData = null;
let usuarioLogueado = false;
let geojsonLayer = null;
const capasOverlay = {};
const rutasTodas = [];

// 2. Inicializar mapa Leaflet
const map = L.map('map').setView([-0.180653, -78.467838], 13);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '© OpenStreetMap'
}).addTo(map);

// 3. Cargar GeoJSON desde GitHub
fetch('https://raw.githubusercontent.com/pinwii21/IDE-TRANSPORTE/main/BASE_DATOS_TRANSPORTE_2025.geojson')
  .then(res => res.json())
  .then(data => {
    data.features.forEach((f, i) => f._id = i);
    geojsonData = data;
    crearCamposFormulario();
    mostrarTabla(data);
    mostrarMapa(data);
    centrarMapa(data);
    actualizarListaPersonas(data.features);
  });

// === CONFIGURACIÓN DE RUTAS ===
const carpetas = [
  { dir: 'Rutas_de_ENTRADA', name: 'Rutas de ENTRADA', color: '#28a745' },
  { dir: 'Rutas_de_SALIDA', name: 'Rutas de SALIDA', color: '#dc3545' }
];

async function cargarIndexYCapas() {
  for (const { dir, name, color } of carpetas) {
    try {
      const indexUrl = `https://raw.githubusercontent.com/pinwii21/IDE-TRANSPORTE/main/${dir}/index.json`;
      const idxRes = await fetch(indexUrl);
      if (!idxRes.ok) throw new Error(`No se pudo cargar: ${indexUrl}`);

      const lista = await idxRes.json();
      const grupo = L.layerGroup();

      for (const fichero of lista) {
        try {
          const geojsonUrl = `https://raw.githubusercontent.com/pinwii21/IDE-TRANSPORTE/main/${dir}/${fichero}`;
          const res = await fetch(geojsonUrl);
          if (!res.ok) throw new Error(`Error al cargar: ${geojsonUrl}`);
          const data = await res.json();
          rutasTodas.push(...data.features);

          const capa = L.geoJSON(data, {
            style: { color, weight: 3 },
            onEachFeature: (feature, layer) => {
              let popup = `<b>${fichero}</b><br>`;
              for (const k in feature.properties) {
                popup += `<b>${k}:</b> ${feature.properties[k]}<br>`;
              }
              layer.bindPopup(popup);
            }
          });

          capa.addTo(grupo);
        } catch (error) {
          console.warn(`Error en ${fichero}:`, error.message);
        }
      }

      capasOverlay[name] = grupo;
      grupo.addTo(map);
    } catch (error) {
      console.error(`Error en carpeta ${dir}:`, error.message);
    }
  }

  L.control.layers(null, capasOverlay, { collapsed: false }).addTo(map);
}
cargarIndexYCapas();

// Buscar ruta más cercana
const btnRutaCercana = document.getElementById("findRouteBtn");
btnRutaCercana.addEventListener("click", () => {
  const id = document.getElementById("personSelect").value;
  const persona = geojsonData.features.find(f => f._id == id);
  if (!persona || !persona.geometry) return alert("Seleccione una persona válida");

  const punto = turf.point(persona.geometry.coordinates);
  let rutaMasCercana = null;
  let distanciaMin = Infinity;

  rutasTodas.forEach(ruta => {
    const distancia = turf.pointToLineDistance(punto, ruta, { units: "kilometers" });
    if (distancia < distanciaMin) {
      distanciaMin = distancia;
      rutaMasCercana = ruta;
    }
  });

  if (rutaMasCercana) {
    const capa = L.geoJSON(rutaMasCercana, {
      style: { color: "blue", weight: 5, dashArray: '5, 10' }
    });
    capa.addTo(map);
    map.fitBounds(capa.getBounds(), { padding: [30, 30] });
  } else {
    alert("No se encontró ruta cercana");
  }
});

// Descargar archivo actualizado
const btnDescargar = document.getElementById("downloadBtn");
btnDescargar.addEventListener("click", () => {
  const blob = new Blob([JSON.stringify(geojsonData, null, 2)], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "personal_actualizado.geojson";
  a.click();
  URL.revokeObjectURL(url);
});
